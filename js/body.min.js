"use strict";

require("core-js/modules/es.array.flat-map.js");

require("core-js/modules/es.array.unscopables.flat-map.js");

require("core-js/modules/es.number.to-fixed.js");

require("core-js/modules/es.promise.js");

require("core-js/modules/es.regexp.constructor.js");

require("core-js/modules/es.regexp.flags.js");

require("core-js/modules/es.regexp.to-string.js");

require("core-js/modules/es.string.includes.js");

require("core-js/modules/es.string.match-all.js");

require("core-js/modules/es.string.replace.js");

require("core-js/modules/es.string.search.js");

require("core-js/modules/es.string.split.js");

require("core-js/modules/es.string.trim.js");

require("core-js/modules/web.dom-collections.iterator.js");

var _this2 = void 0;

/*
* Javascript to show and hide cookie banner using localstroage
*/

/**
 * Shows the Cookie banner
 */
const showCookieBanner = function showCookieBanner() {
  const cookieBanner = document.getElementsByClassName('nk-cookie-banner')[0];
  cookieBanner.style.display = 'block';
};
/**
 * Hides the Cookie banner and saves the value to localstorage
 */


const hideCookieBanner = function hideCookieBanner() {
  localStorage.setItem('web_dev_isCookieAccepted', 'yes');
  const cookieBanner = document.getElementsByClassName('nk-cookie-banner')[0];
  cookieBanner.style.display = 'none';
};
/**
 * Checks the localstorage and shows Cookie banner based on it.
 */


const initializeCookieBanner = function initializeCookieBanner() {
  const isCookieAccepted = localStorage.getItem('web_dev_isCookieAccepted');

  if (isCookieAccepted === null) {
    localStorage.clear();
    localStorage.setItem('web_dev_isCookieAccepted', 'no');
    showCookieBanner();
  }

  if (isCookieAccepted === 'no') {
    showCookieBanner();
  }
}; // Assigning values to window object


$(document).ready(initializeCookieBanner()); // window.onload = initializeCookieBanner();

window.nk_hideCookieBanner = hideCookieBanner;
$(document).ready(function () {
  $('#fullScreenButton').click(function () {
    if (screenfull.isEnabled) {
      screenfull.toggle();
      $('#fullscreen').removeAttr('class');
      $('#fullscreen').attr('class', screenfull.isFullscreen ? 'bi bi-fullscreen' : 'bi bi-fullscreen-exit');
    } else {
      alert('Your browser doesn\'t support full screen');
    }

    if (screenfull.isEnabled) {
      screenfull.on('change', function () {
        console.log('Am I fullscreen?', screenfull.isFullscreen ? 'Yes' : 'No');
      });
    }
  });
});
let pagesIndex, searchIndex;
const MAX_SUMMARY_LENGTH = 200;
const SENTENCE_BOUNDARY_REGEX = /\b\.\s/gm;
const WORD_REGEX = /\b(\w*)[\W|\s|\b]?/gm;

async function initSearchIndex() {
  try {
    const response = await fetch("/index.json");
    pagesIndex = await response.json();
    searchIndex = lunr(function () {
      var _this = this;

      this.field("excerpt");
      this.field("content");
      this.field("title");
      this.ref("href");
      pagesIndex.forEach(function (page) {
        return _this.add(page);
      });
    });
  } catch (e) {
    console.log(e);
  }
}

initSearchIndex();
document.addEventListener("DOMContentLoaded", function () {
  if (document.getElementById("search-form") != null) {
    const searchInput = document.getElementById("search-input");
    searchInput.addEventListener("keydown", function (event) {
      if (event.key == Enter) handleSearchQuery(event);
    });
    document.querySelector(".search-icon").addEventListener("click", function (event) {
      return handleSearchQuery(event);
    });
  }
});

function handleSearchQuery(event) {
  event.preventDefault();
  const query = $(obj).find('#search-input').val().trim().toLowerCase();

  if (!query) {
    $(obj).find('#result-container').html('<span>Please enter a search term</span>');
    $(obj).find('#result-container').fadeIn(100);
    return;
  }

  const results = searchSite(query);

  if (!results.length) {
    $(obj).find('#result-container').html('<span>Your search returned no results</span>');
    $(obj).find('#result-container').fadeIn(100);
    return;
  }

  renderSearchResults(query, results);
}

function searchSite(query) {
  const originalQuery = query;
  query = getLunrSearchQuery(query);
  let results = getSearchResults(query);
  return results.length ? results : query !== originalQuery ? getSearchResults(originalQuery) : [];
}

function getSearchResults(query) {
  return searchIndex.search(query).flatMap(function (hit) {
    if (hit.ref == "undefined") return [];
    let pageMatch = pagesIndex.filter(function (page) {
      return page.href === hit.ref;
    })[0];
    pageMatch.score = hit.score;
    return [pageMatch];
  });
}

function getLunrSearchQuery(query) {
  const searchTerms = query.split(" ");

  if (searchTerms.length === 1) {
    return query;
  }

  query = "";

  for (const term of searchTerms) {
    query += "+".concat(term, " ");
  }

  return query.trim();
}

function createSearchResultBlurb(query, pageContent) {
  const searchQueryRegex = new RegExp(createQueryStringRegex(query), "gmi");
  const searchQueryHits = Array.from(pageContent.matchAll(searchQueryRegex), function (m) {
    return m.index;
  });
  const sentenceBoundaries = Array.from(pageContent.matchAll(SENTENCE_BOUNDARY_REGEX), function (m) {
    return m.index;
  });
  let searchResultText = "";
  let lastEndOfSentence = 0;

  for (const hitLocation of searchQueryHits) {
    if (hitLocation > lastEndOfSentence) {
      for (let i = 0; i < sentenceBoundaries.length; i++) {
        if (sentenceBoundaries[i] > hitLocation) {
          const startOfSentence = i > 0 ? sentenceBoundaries[i - 1] + 1 : 0;
          const endOfSentence = sentenceBoundaries[i];
          lastEndOfSentence = endOfSentence;
          parsedSentence = pageContent.slice(startOfSentence, endOfSentence).trim();
          searchResultText += "".concat(parsedSentence, " ... ");
          break;
        }
      }
    }

    const searchResultWords = tokenize(searchResultText);
    const pageBreakers = searchResultWords.filter(function (word) {
      return word.length > 50;
    });

    if (pageBreakers.length > 0) {
      searchResultText = fixPageBreakers(searchResultText, pageBreakers);
    }

    if (searchResultWords.length >= MAX_SUMMARY_LENGTH) break;
  }

  return ellipsize(searchResultText, MAX_SUMMARY_LENGTH).replace(searchQueryRegex, "<strong>$&</strong>");
}

function createQueryStringRegex(query) {
  const searchTerms = query.split(" ");

  if (searchTerms.length == 1) {
    return query;
  }

  query = "";

  for (const term of searchTerms) {
    query += "".concat(term, "|");
  }

  query = query.slice(0, -1);
  return "(".concat(query, ")");
}

function tokenize(input) {
  const wordMatches = Array.from(input.matchAll(WORD_REGEX), function (m) {
    return m;
  });
  return wordMatches.map(function (m) {
    return {
      word: m[0],
      start: m.index,
      end: m.index + m[0].length,
      length: m[0].length
    };
  });
}

function fixPageBreakers(input, largeWords) {
  largeWords.forEach(function (word) {
    const chunked = chunkify(word.word, 20);
    input = input.replace(word.word, chunked);
  });
  return input;
}

function chunkify(input, chunkSize) {
  let output = "";
  let totalChunks = input.length / chunkSize | 0;
  let lastChunkIsUneven = input.length % chunkSize > 0;

  if (lastChunkIsUneven) {
    totalChunks += 1;
  }

  for (let i = 0; i < totalChunks; i++) {
    let start = i * chunkSize;
    let end = start + chunkSize;

    if (lastChunkIsUneven && i === totalChunks - 1) {
      end = input.length;
    }

    output += input.slice(start, end) + " ";
  }

  return output;
}

function ellipsize(input, maxLength) {
  const words = tokenize(input);

  if (words.length <= maxLength) {
    return input;
  }

  return input.slice(0, words[maxLength].end) + "...";
}

if (!String.prototype.matchAll) {
  String.prototype.matchAll = function (regex) {
    "use strict";

    function ensureFlag(flags, flag) {
      return flags.includes(flag) ? flags : flags + flag;
    }

    function* matchAll(str, regex) {
      const localCopy = new RegExp(regex, ensureFlag(regex.flags, "g"));
      let match;

      while (match = localCopy.exec(str)) {
        match.index = localCopy.lastIndex - match[0].length;
        yield match;
      }
    }

    return matchAll(this, regex);
  };
}

function getColorForSearchResult(score) {
  const highQualityHue = 171;
  const lowQualityHue = 212;
  return adjustHue(highQualityHue, lowQualityHue, score);
}

function adjustHue(hue1, hue2, score) {
  if (score > 3) return "hsl(".concat(hue1, ", 100%, 50%)");
  const hueAdjust = parseFloat(score) / 3 * (hue1 - hue2);
  const newHue = hue2 + Math.floor(hueAdjust);
  return "hsl(".concat(newHue, ", 100%, 50%)");
} // New


function renderSearchResults(query, results) {
  clearSearchResults();
  updateSearchResults(query, results);
  showSearchResults();
  scrollToTop();
}

function clearSearchResults() {
  const results = document.querySelector(".search-results ul");

  while (results.firstChild) results.removeChild(results.firstChild);
}

function updateSearchResults(query, results) {
  document.getElementById("query").innerHTML = query;
  document.querySelector("#result-container ul").innerHTML = results.map(function (hit) {
    return "\n      <li class=\"search-result-item\" data-score=\"".concat(hit.score.toFixed(2), "\">\n        <a href=\"").concat(hit.href, "\" class=\"search-result-page-title\">").concat(hit.title, "</a>\n        <p>").concat(createSearchResultBlurb(query, hit.content), "</p>\n      </li>\n      ");
  }).join("");
  const searchResultListItems = document.querySelectorAll("#result-container ul li");
  document.getElementById("results-count").innerHTML = searchResultListItems.length;
  document.getElementById("results-count-text").innerHTML = searchResultListItems.length > 1 ? "results" : "result";
  searchResultListItems.forEach(function (li) {
    return li.firstElementChild.style.color = getColorForSearchResult(li.dataset.score);
  });
}

function showSearchResults() {
  document.querySelector(".primary").classList.add("hide-element");
  document.querySelector(".search-results").classList.remove("hide-element");
  document.getElementById("site-search").classList.add("expanded");
  document.getElementById("clear-search-results-sidebar").classList.remove("hide-element");
}

function scrollToTop() {
  const toTopInterval = setInterval(function () {
    const supportedScrollTop = document.body.scrollTop > 0 ? document.body : document.documentElement;

    if (supportedScrollTop.scrollTop > 0) {
      supportedScrollTop.scrollTop = supportedScrollTop.scrollTop - 50;
    }

    if (supportedScrollTop.scrollTop < 1) {
      clearInterval(toTopInterval);
    }
  }, 10);
}

const searchToggle = function searchToggle(obj, evt) {
  const container = $(obj).closest('#search-wrapper');
  const icon = $(obj).closest('#search-icon');

  if (!container.hasClass('active')) {
    container.addClass('active');
    icon.addClass('search-icon');
    evt.preventDefault();
  } else if (container.hasClass('active') && $(obj).closest('#input-holder').length == 0) {
    container.removeClass('active');
    icon.removeClass('search-icon'); // clear input

    container.find('#search-input').val(''); // clear and hide result container when we press close

    container.find('#result-container').fadeOut(100, function () {
      $(_this2).empty();
    });
  }
};

const submitFn = function submitFn(obj, evt) {
  value = $(obj).find('#search-input').val().trim().toLowerCase();
  _html = 'Searching for: ';

  if (!value.length) {
    _html = 'Ehem, I can\'t search nothing';
  } else {
    _html += '<b>' + value + '</b>';
  }

  $(obj).find('#result-container').html('<span>' + _html + '</span>');
  $(obj).find('#result-container').fadeIn(100);
  evt.preventDefault();
};