/*
* Javascript to show and hide cookie banner using localstroage
*/

/**
 * Shows the Cookie banner
 */
const showCookieBanner = () => {
  const cookieBanner = document.getElementsByClassName('nk-cookie-banner')[0];
  cookieBanner.style.display = 'block';
};

/**
 * Hides the Cookie banner and saves the value to localstorage
 */
const hideCookieBanner = () => {
  localStorage.setItem('web_dev_isCookieAccepted', 'yes');

  const cookieBanner = document.getElementsByClassName('nk-cookie-banner')[0];
  cookieBanner.style.display = 'none';
};

/**
 * Checks the localstorage and shows Cookie banner based on it.
 */
const initializeCookieBanner = () => {
  const isCookieAccepted = localStorage.getItem('web_dev_isCookieAccepted');
  if (isCookieAccepted === null) {
    localStorage.clear();
    localStorage.setItem('web_dev_isCookieAccepted', 'no');
    showCookieBanner();
  }
  if (isCookieAccepted === 'no') {
    showCookieBanner();
  }
};

// Assigning values to window object
$(document).ready(initializeCookieBanner());
// window.onload = initializeCookieBanner();
window.nk_hideCookieBanner = hideCookieBanner;

$(document).ready(() => {
  $('#fullScreenButton')
      .click(() => {
        if (screenfull.isEnabled) {
          screenfull.toggle();
          $('#fullscreen').removeAttr('class');
          $('#fullscreen').attr('class',
  screenfull.isFullscreen ? 'bi bi-fullscreen':'bi bi-fullscreen-exit');
        } else {
          alert('Your browser doesn\'t support full screen');
        }
        if (screenfull.isEnabled) {
          screenfull.on('change', () => {
            console.log('Am I fullscreen?',
          screenfull.isFullscreen ? 'Yes' : 'No');
          });
        }
      });
});


let pagesIndex, searchIndex;

const MAX_SUMMARY_LENGTH = 200

const SENTENCE_BOUNDARY_REGEX = /\b\.\s/gm

const WORD_REGEX = /\b(\w*)[\W|\s|\b]?/gm

async function initSearchIndex() {
  try {
    const response = await fetch("/index.json");
    pagesIndex = await response.json();
    searchIndex = lunr(function () {
      this.field("excerpt");
      this.field("content");
      this.field("title");
      this.ref("href");
      pagesIndex.forEach((page) => this.add(page));
    });
  } catch (e) {
    console.log(e);
  }
}

initSearchIndex();

document.addEventListener("DOMContentLoaded", function () {
    if (document.getElementById("search-form") != null) {
      const searchInput = document.getElementById("search-input");
      searchInput.addEventListener("keydown", (event) => {
        if (event.key == Enter) handleSearchQuery(event)
      });
      document
        .querySelector(".search-icon")
        .addEventListener("click", (event) => handleSearchQuery(event));
    }
  })

  function handleSearchQuery(event) {
    event.preventDefault();
    const query =  $(obj).find('#search-input').val().trim().toLowerCase();
    if (!query) {
        $(obj).find('#result-container').html('<span>Please enter a search term</span>');
        $(obj).find('#result-container').fadeIn(100);
      return;
    }
    const results = searchSite(query)
    if (!results.length) {
      $(obj).find('#result-container').html('<span>Your search returned no results</span>');
      $(obj).find('#result-container').fadeIn(100);
      return
    }
    renderSearchResults(query, results)
  }
  function searchSite(query) {
    const originalQuery = query;
    query = getLunrSearchQuery(query);
    let results = getSearchResults(query);
    return results.length
      ? results
      : query !== originalQuery
      ? getSearchResults(originalQuery)
      : [];
  }

  function getSearchResults(query) {
    return searchIndex.search(query).flatMap((hit) => {
      if (hit.ref == "undefined") return [];
      let pageMatch = pagesIndex.filter((page) => page.href === hit.ref)[0];
      pageMatch.score = hit.score;
      return [pageMatch];
    });
  }
  
  function getLunrSearchQuery(query) {
    const searchTerms = query.split(" ");
    if (searchTerms.length === 1) {
      return query;
    }
    query = "";
    for (const term of searchTerms) {
      query += `+${term} `;
    }
    return query.trim();
  }

  function createSearchResultBlurb(query, pageContent) {
    const searchQueryRegex = new RegExp(createQueryStringRegex(query), "gmi");
    const searchQueryHits = Array.from(
      pageContent.matchAll(searchQueryRegex),
      (m) => m.index
    );
    const sentenceBoundaries = Array.from(
      pageContent.matchAll(SENTENCE_BOUNDARY_REGEX),
      (m) => m.index
    );
    let searchResultText = "";
    let lastEndOfSentence = 0;
    for (const hitLocation of searchQueryHits) {
      if (hitLocation > lastEndOfSentence) {
        for (let i = 0; i < sentenceBoundaries.length; i++) {
          if (sentenceBoundaries[i] > hitLocation) {
            const startOfSentence = i > 0 ? sentenceBoundaries[i - 1] + 1 : 0;
            const endOfSentence = sentenceBoundaries[i];
            lastEndOfSentence = endOfSentence;
            parsedSentence = pageContent.slice(startOfSentence, endOfSentence).trim();
            searchResultText += `${parsedSentence} ... `;
            break;
          }
        }
      }
      const searchResultWords = tokenize(searchResultText);
      const pageBreakers = searchResultWords.filter((word) => word.length > 50);
      if (pageBreakers.length > 0) {
        searchResultText = fixPageBreakers(searchResultText, pageBreakers);
      }
      if (searchResultWords.length >= MAX_SUMMARY_LENGTH) break;
    }
    return ellipsize(searchResultText, MAX_SUMMARY_LENGTH).replace(
      searchQueryRegex,
      "<strong>$&</strong>"
    );
  }

  function createQueryStringRegex(query) {
    const searchTerms = query.split(" ");
    if (searchTerms.length == 1) {
      return query;
    }
    query = "";
    for (const term of searchTerms) {
      query += `${term}|`;
    }
    query = query.slice(0, -1);
    return `(${query})`;
  }

  function tokenize(input) {
    const wordMatches = Array.from(input.matchAll(WORD_REGEX), (m) => m);
    return wordMatches.map((m) => ({
      word: m[0],
      start: m.index,
      end: m.index + m[0].length,
      length: m[0].length,
    }));
  }

  function fixPageBreakers(input, largeWords) {
    largeWords.forEach((word) => {
      const chunked = chunkify(word.word, 20);
      input = input.replace(word.word, chunked);
    });
    return input;
  }
  
  function chunkify(input, chunkSize) {
    let output = "";
    let totalChunks = (input.length / chunkSize) | 0;
    let lastChunkIsUneven = input.length % chunkSize > 0;
    if (lastChunkIsUneven) {
      totalChunks += 1;
    }
    for (let i = 0; i < totalChunks; i++) {
      let start = i * chunkSize;
      let end = start + chunkSize;
      if (lastChunkIsUneven && i === totalChunks - 1) {
        end = input.length;
      }
      output += input.slice(start, end) + " ";
    }
    return output;
  }

  function ellipsize(input, maxLength) {
    const words = tokenize(input);
    if (words.length <= maxLength) {
      return input;
    }
    return input.slice(0, words[maxLength].end) + "...";
  }

  if (!String.prototype.matchAll) {
    String.prototype.matchAll = function (regex) {
      "use strict";
      function ensureFlag(flags, flag) {
        return flags.includes(flag) ? flags : flags + flag;
      }
      function* matchAll(str, regex) {
        const localCopy = new RegExp(regex, ensureFlag(regex.flags, "g"));
        let match;
        while ((match = localCopy.exec(str))) {
          match.index = localCopy.lastIndex - match[0].length;
          yield match;
        }
      }
      return matchAll(this, regex);
    };
  }

  function getColorForSearchResult(score) {
    const highQualityHue = 171;
    const lowQualityHue = 212;
    return adjustHue(highQualityHue, lowQualityHue, score);
  }
  
  function adjustHue(hue1, hue2, score) {
    if (score > 3) return `hsl(${hue1}, 100%, 50%)`;
    const hueAdjust = (parseFloat(score) / 3) * (hue1 - hue2);
    const newHue = hue2 + Math.floor(hueAdjust);
    return `hsl(${newHue}, 100%, 50%)`;
  }
// New
function renderSearchResults(query, results) {
    clearSearchResults();
    updateSearchResults(query, results);
    showSearchResults();
    scrollToTop();
  }
  
  function clearSearchResults() {
    const results = document.querySelector(".search-results ul");
    while (results.firstChild) results.removeChild(results.firstChild);
  }
  
  function updateSearchResults(query, results) {
    document.getElementById("query").innerHTML = query;
    document.querySelector("#result-container ul").innerHTML = results
      .map(
        (hit) => `
      <li class="search-result-item" data-score="${hit.score.toFixed(2)}">
        <a href="${hit.href}" class="search-result-page-title">${hit.title}</a>
        <p>${createSearchResultBlurb(query, hit.content)}</p>
      </li>
      `
      )
      .join("");
    const searchResultListItems = document.querySelectorAll("#result-container ul li");
    document.getElementById("results-count").innerHTML = searchResultListItems.length;
    document.getElementById("results-count-text").innerHTML = searchResultListItems.length > 1 ? "results" : "result";
    searchResultListItems.forEach(
      (li) => (li.firstElementChild.style.color = getColorForSearchResult(li.dataset.score))
    );
  }

  function showSearchResults() {
    document.querySelector(".primary").classList.add("hide-element");
    document.querySelector(".search-results").classList.remove("hide-element");
    document.getElementById("site-search").classList.add("expanded");
    document.getElementById("clear-search-results-sidebar").classList.remove("hide-element");
  }
  
  function scrollToTop() {
    const toTopInterval = setInterval(function () {
      const supportedScrollTop = document.body.scrollTop > 0 ? document.body : document.documentElement;
      if (supportedScrollTop.scrollTop > 0) {
        supportedScrollTop.scrollTop = supportedScrollTop.scrollTop - 50;
      }
      if (supportedScrollTop.scrollTop < 1) {
        clearInterval(toTopInterval);
      }
    }, 10);
  }
const searchToggle = (obj, evt) => {
  const container = $(obj).closest('#search-wrapper');
  const icon = $(obj).closest('#search-icon')
  if (!container.hasClass('active')) {
    container.addClass('active');
    icon.addClass('search-icon')
    evt.preventDefault();
  } else if (container.hasClass('active') && $(obj)
      .closest('#input-holder').length == 0) {
    container.removeClass('active');
    icon.removeClass('search-icon')
    // clear input
    container.find('#search-input').val('');
    // clear and hide result container when we press close
    container.find('#result-container').fadeOut(100, () => {
      $(this).empty();
    });
  }
}
const submitFn = (obj, evt) => {
  value = $(obj).find('#search-input').val().trim().toLowerCase();
  _html = 'Searching for: ';
  if (!value.length) {
    _html = 'Ehem, I can\'t search nothing';
  } else {
    _html += '<b>' + value + '</b>';
  }
  $(obj).find('#result-container').html('<span>' + _html + '</span>');
  $(obj).find('#result-container').fadeIn(100);
  evt.preventDefault();
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvb2tpZS1iYW5uZXIuanMiLCJmdWxsc2NyZWVuLmpzIiwibHVybi5qcyIsInNlYXJjaC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN6Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDclFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImJvZHkubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiogSmF2YXNjcmlwdCB0byBzaG93IGFuZCBoaWRlIGNvb2tpZSBiYW5uZXIgdXNpbmcgbG9jYWxzdHJvYWdlXG4qL1xuXG4vKipcbiAqIFNob3dzIHRoZSBDb29raWUgYmFubmVyXG4gKi9cbmNvbnN0IHNob3dDb29raWVCYW5uZXIgPSAoKSA9PiB7XG4gIGNvbnN0IGNvb2tpZUJhbm5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25rLWNvb2tpZS1iYW5uZXInKVswXTtcbiAgY29va2llQmFubmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xufTtcblxuLyoqXG4gKiBIaWRlcyB0aGUgQ29va2llIGJhbm5lciBhbmQgc2F2ZXMgdGhlIHZhbHVlIHRvIGxvY2Fsc3RvcmFnZVxuICovXG5jb25zdCBoaWRlQ29va2llQmFubmVyID0gKCkgPT4ge1xuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnd2ViX2Rldl9pc0Nvb2tpZUFjY2VwdGVkJywgJ3llcycpO1xuXG4gIGNvbnN0IGNvb2tpZUJhbm5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25rLWNvb2tpZS1iYW5uZXInKVswXTtcbiAgY29va2llQmFubmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG59O1xuXG4vKipcbiAqIENoZWNrcyB0aGUgbG9jYWxzdG9yYWdlIGFuZCBzaG93cyBDb29raWUgYmFubmVyIGJhc2VkIG9uIGl0LlxuICovXG5jb25zdCBpbml0aWFsaXplQ29va2llQmFubmVyID0gKCkgPT4ge1xuICBjb25zdCBpc0Nvb2tpZUFjY2VwdGVkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3dlYl9kZXZfaXNDb29raWVBY2NlcHRlZCcpO1xuICBpZiAoaXNDb29raWVBY2NlcHRlZCA9PT0gbnVsbCkge1xuICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd3ZWJfZGV2X2lzQ29va2llQWNjZXB0ZWQnLCAnbm8nKTtcbiAgICBzaG93Q29va2llQmFubmVyKCk7XG4gIH1cbiAgaWYgKGlzQ29va2llQWNjZXB0ZWQgPT09ICdubycpIHtcbiAgICBzaG93Q29va2llQmFubmVyKCk7XG4gIH1cbn07XG5cbi8vIEFzc2lnbmluZyB2YWx1ZXMgdG8gd2luZG93IG9iamVjdFxuJChkb2N1bWVudCkucmVhZHkoaW5pdGlhbGl6ZUNvb2tpZUJhbm5lcigpKTtcbi8vIHdpbmRvdy5vbmxvYWQgPSBpbml0aWFsaXplQ29va2llQmFubmVyKCk7XG53aW5kb3cubmtfaGlkZUNvb2tpZUJhbm5lciA9IGhpZGVDb29raWVCYW5uZXI7XG4iLCIkKGRvY3VtZW50KS5yZWFkeSgoKSA9PiB7XG4gICQoJyNmdWxsU2NyZWVuQnV0dG9uJylcbiAgICAgIC5jbGljaygoKSA9PiB7XG4gICAgICAgIGlmIChzY3JlZW5mdWxsLmlzRW5hYmxlZCkge1xuICAgICAgICAgIHNjcmVlbmZ1bGwudG9nZ2xlKCk7XG4gICAgICAgICAgJCgnI2Z1bGxzY3JlZW4nKS5yZW1vdmVBdHRyKCdjbGFzcycpO1xuICAgICAgICAgICQoJyNmdWxsc2NyZWVuJykuYXR0cignY2xhc3MnLFxuICBzY3JlZW5mdWxsLmlzRnVsbHNjcmVlbiA/ICdiaSBiaS1mdWxsc2NyZWVuJzonYmkgYmktZnVsbHNjcmVlbi1leGl0Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWxlcnQoJ1lvdXIgYnJvd3NlciBkb2VzblxcJ3Qgc3VwcG9ydCBmdWxsIHNjcmVlbicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY3JlZW5mdWxsLmlzRW5hYmxlZCkge1xuICAgICAgICAgIHNjcmVlbmZ1bGwub24oJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdBbSBJIGZ1bGxzY3JlZW4/JyxcbiAgICAgICAgICBzY3JlZW5mdWxsLmlzRnVsbHNjcmVlbiA/ICdZZXMnIDogJ05vJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xufSk7XG5cbiIsImxldCBwYWdlc0luZGV4LCBzZWFyY2hJbmRleDtcblxuY29uc3QgTUFYX1NVTU1BUllfTEVOR1RIID0gMjAwXG5cbmNvbnN0IFNFTlRFTkNFX0JPVU5EQVJZX1JFR0VYID0gL1xcYlxcLlxccy9nbVxuXG5jb25zdCBXT1JEX1JFR0VYID0gL1xcYihcXHcqKVtcXFd8XFxzfFxcYl0/L2dtXG5cbmFzeW5jIGZ1bmN0aW9uIGluaXRTZWFyY2hJbmRleCgpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFwiL2luZGV4Lmpzb25cIik7XG4gICAgcGFnZXNJbmRleCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICBzZWFyY2hJbmRleCA9IGx1bnIoZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5maWVsZChcImV4Y2VycHRcIik7XG4gICAgICB0aGlzLmZpZWxkKFwiY29udGVudFwiKTtcbiAgICAgIHRoaXMuZmllbGQoXCJ0aXRsZVwiKTtcbiAgICAgIHRoaXMucmVmKFwiaHJlZlwiKTtcbiAgICAgIHBhZ2VzSW5kZXguZm9yRWFjaCgocGFnZSkgPT4gdGhpcy5hZGQocGFnZSkpO1xuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZSk7XG4gIH1cbn1cblxuaW5pdFNlYXJjaEluZGV4KCk7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZWFyY2gtZm9ybVwiKSAhPSBudWxsKSB7XG4gICAgICBjb25zdCBzZWFyY2hJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VhcmNoLWlucHV0XCIpO1xuICAgICAgc2VhcmNoSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC5rZXkgPT0gRW50ZXIpIGhhbmRsZVNlYXJjaFF1ZXJ5KGV2ZW50KVxuICAgICAgfSk7XG4gICAgICBkb2N1bWVudFxuICAgICAgICAucXVlcnlTZWxlY3RvcihcIi5zZWFyY2gtaWNvblwiKVxuICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4gaGFuZGxlU2VhcmNoUXVlcnkoZXZlbnQpKTtcbiAgICB9XG4gIH0pXG5cbiAgZnVuY3Rpb24gaGFuZGxlU2VhcmNoUXVlcnkoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gICQob2JqKS5maW5kKCcjc2VhcmNoLWlucHV0JykudmFsKCkudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKCFxdWVyeSkge1xuICAgICAgICAkKG9iaikuZmluZCgnI3Jlc3VsdC1jb250YWluZXInKS5odG1sKCc8c3Bhbj5QbGVhc2UgZW50ZXIgYSBzZWFyY2ggdGVybTwvc3Bhbj4nKTtcbiAgICAgICAgJChvYmopLmZpbmQoJyNyZXN1bHQtY29udGFpbmVyJykuZmFkZUluKDEwMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdHMgPSBzZWFyY2hTaXRlKHF1ZXJ5KVxuICAgIGlmICghcmVzdWx0cy5sZW5ndGgpIHtcbiAgICAgICQob2JqKS5maW5kKCcjcmVzdWx0LWNvbnRhaW5lcicpLmh0bWwoJzxzcGFuPllvdXIgc2VhcmNoIHJldHVybmVkIG5vIHJlc3VsdHM8L3NwYW4+Jyk7XG4gICAgICAkKG9iaikuZmluZCgnI3Jlc3VsdC1jb250YWluZXInKS5mYWRlSW4oMTAwKTtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICByZW5kZXJTZWFyY2hSZXN1bHRzKHF1ZXJ5LCByZXN1bHRzKVxuICB9XG4gIGZ1bmN0aW9uIHNlYXJjaFNpdGUocXVlcnkpIHtcbiAgICBjb25zdCBvcmlnaW5hbFF1ZXJ5ID0gcXVlcnk7XG4gICAgcXVlcnkgPSBnZXRMdW5yU2VhcmNoUXVlcnkocXVlcnkpO1xuICAgIGxldCByZXN1bHRzID0gZ2V0U2VhcmNoUmVzdWx0cyhxdWVyeSk7XG4gICAgcmV0dXJuIHJlc3VsdHMubGVuZ3RoXG4gICAgICA/IHJlc3VsdHNcbiAgICAgIDogcXVlcnkgIT09IG9yaWdpbmFsUXVlcnlcbiAgICAgID8gZ2V0U2VhcmNoUmVzdWx0cyhvcmlnaW5hbFF1ZXJ5KVxuICAgICAgOiBbXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNlYXJjaFJlc3VsdHMocXVlcnkpIHtcbiAgICByZXR1cm4gc2VhcmNoSW5kZXguc2VhcmNoKHF1ZXJ5KS5mbGF0TWFwKChoaXQpID0+IHtcbiAgICAgIGlmIChoaXQucmVmID09IFwidW5kZWZpbmVkXCIpIHJldHVybiBbXTtcbiAgICAgIGxldCBwYWdlTWF0Y2ggPSBwYWdlc0luZGV4LmZpbHRlcigocGFnZSkgPT4gcGFnZS5ocmVmID09PSBoaXQucmVmKVswXTtcbiAgICAgIHBhZ2VNYXRjaC5zY29yZSA9IGhpdC5zY29yZTtcbiAgICAgIHJldHVybiBbcGFnZU1hdGNoXTtcbiAgICB9KTtcbiAgfVxuICBcbiAgZnVuY3Rpb24gZ2V0THVuclNlYXJjaFF1ZXJ5KHF1ZXJ5KSB7XG4gICAgY29uc3Qgc2VhcmNoVGVybXMgPSBxdWVyeS5zcGxpdChcIiBcIik7XG4gICAgaWYgKHNlYXJjaFRlcm1zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIHF1ZXJ5O1xuICAgIH1cbiAgICBxdWVyeSA9IFwiXCI7XG4gICAgZm9yIChjb25zdCB0ZXJtIG9mIHNlYXJjaFRlcm1zKSB7XG4gICAgICBxdWVyeSArPSBgKyR7dGVybX0gYDtcbiAgICB9XG4gICAgcmV0dXJuIHF1ZXJ5LnRyaW0oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVNlYXJjaFJlc3VsdEJsdXJiKHF1ZXJ5LCBwYWdlQ29udGVudCkge1xuICAgIGNvbnN0IHNlYXJjaFF1ZXJ5UmVnZXggPSBuZXcgUmVnRXhwKGNyZWF0ZVF1ZXJ5U3RyaW5nUmVnZXgocXVlcnkpLCBcImdtaVwiKTtcbiAgICBjb25zdCBzZWFyY2hRdWVyeUhpdHMgPSBBcnJheS5mcm9tKFxuICAgICAgcGFnZUNvbnRlbnQubWF0Y2hBbGwoc2VhcmNoUXVlcnlSZWdleCksXG4gICAgICAobSkgPT4gbS5pbmRleFxuICAgICk7XG4gICAgY29uc3Qgc2VudGVuY2VCb3VuZGFyaWVzID0gQXJyYXkuZnJvbShcbiAgICAgIHBhZ2VDb250ZW50Lm1hdGNoQWxsKFNFTlRFTkNFX0JPVU5EQVJZX1JFR0VYKSxcbiAgICAgIChtKSA9PiBtLmluZGV4XG4gICAgKTtcbiAgICBsZXQgc2VhcmNoUmVzdWx0VGV4dCA9IFwiXCI7XG4gICAgbGV0IGxhc3RFbmRPZlNlbnRlbmNlID0gMDtcbiAgICBmb3IgKGNvbnN0IGhpdExvY2F0aW9uIG9mIHNlYXJjaFF1ZXJ5SGl0cykge1xuICAgICAgaWYgKGhpdExvY2F0aW9uID4gbGFzdEVuZE9mU2VudGVuY2UpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZW50ZW5jZUJvdW5kYXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoc2VudGVuY2VCb3VuZGFyaWVzW2ldID4gaGl0TG9jYXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0T2ZTZW50ZW5jZSA9IGkgPiAwID8gc2VudGVuY2VCb3VuZGFyaWVzW2kgLSAxXSArIDEgOiAwO1xuICAgICAgICAgICAgY29uc3QgZW5kT2ZTZW50ZW5jZSA9IHNlbnRlbmNlQm91bmRhcmllc1tpXTtcbiAgICAgICAgICAgIGxhc3RFbmRPZlNlbnRlbmNlID0gZW5kT2ZTZW50ZW5jZTtcbiAgICAgICAgICAgIHBhcnNlZFNlbnRlbmNlID0gcGFnZUNvbnRlbnQuc2xpY2Uoc3RhcnRPZlNlbnRlbmNlLCBlbmRPZlNlbnRlbmNlKS50cmltKCk7XG4gICAgICAgICAgICBzZWFyY2hSZXN1bHRUZXh0ICs9IGAke3BhcnNlZFNlbnRlbmNlfSAuLi4gYDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3Qgc2VhcmNoUmVzdWx0V29yZHMgPSB0b2tlbml6ZShzZWFyY2hSZXN1bHRUZXh0KTtcbiAgICAgIGNvbnN0IHBhZ2VCcmVha2VycyA9IHNlYXJjaFJlc3VsdFdvcmRzLmZpbHRlcigod29yZCkgPT4gd29yZC5sZW5ndGggPiA1MCk7XG4gICAgICBpZiAocGFnZUJyZWFrZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc2VhcmNoUmVzdWx0VGV4dCA9IGZpeFBhZ2VCcmVha2VycyhzZWFyY2hSZXN1bHRUZXh0LCBwYWdlQnJlYWtlcnMpO1xuICAgICAgfVxuICAgICAgaWYgKHNlYXJjaFJlc3VsdFdvcmRzLmxlbmd0aCA+PSBNQVhfU1VNTUFSWV9MRU5HVEgpIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gZWxsaXBzaXplKHNlYXJjaFJlc3VsdFRleHQsIE1BWF9TVU1NQVJZX0xFTkdUSCkucmVwbGFjZShcbiAgICAgIHNlYXJjaFF1ZXJ5UmVnZXgsXG4gICAgICBcIjxzdHJvbmc+JCY8L3N0cm9uZz5cIlxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVRdWVyeVN0cmluZ1JlZ2V4KHF1ZXJ5KSB7XG4gICAgY29uc3Qgc2VhcmNoVGVybXMgPSBxdWVyeS5zcGxpdChcIiBcIik7XG4gICAgaWYgKHNlYXJjaFRlcm1zLmxlbmd0aCA9PSAxKSB7XG4gICAgICByZXR1cm4gcXVlcnk7XG4gICAgfVxuICAgIHF1ZXJ5ID0gXCJcIjtcbiAgICBmb3IgKGNvbnN0IHRlcm0gb2Ygc2VhcmNoVGVybXMpIHtcbiAgICAgIHF1ZXJ5ICs9IGAke3Rlcm19fGA7XG4gICAgfVxuICAgIHF1ZXJ5ID0gcXVlcnkuc2xpY2UoMCwgLTEpO1xuICAgIHJldHVybiBgKCR7cXVlcnl9KWA7XG4gIH1cblxuICBmdW5jdGlvbiB0b2tlbml6ZShpbnB1dCkge1xuICAgIGNvbnN0IHdvcmRNYXRjaGVzID0gQXJyYXkuZnJvbShpbnB1dC5tYXRjaEFsbChXT1JEX1JFR0VYKSwgKG0pID0+IG0pO1xuICAgIHJldHVybiB3b3JkTWF0Y2hlcy5tYXAoKG0pID0+ICh7XG4gICAgICB3b3JkOiBtWzBdLFxuICAgICAgc3RhcnQ6IG0uaW5kZXgsXG4gICAgICBlbmQ6IG0uaW5kZXggKyBtWzBdLmxlbmd0aCxcbiAgICAgIGxlbmd0aDogbVswXS5sZW5ndGgsXG4gICAgfSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZml4UGFnZUJyZWFrZXJzKGlucHV0LCBsYXJnZVdvcmRzKSB7XG4gICAgbGFyZ2VXb3Jkcy5mb3JFYWNoKCh3b3JkKSA9PiB7XG4gICAgICBjb25zdCBjaHVua2VkID0gY2h1bmtpZnkod29yZC53b3JkLCAyMCk7XG4gICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2Uod29yZC53b3JkLCBjaHVua2VkKTtcbiAgICB9KTtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIGNodW5raWZ5KGlucHV0LCBjaHVua1NpemUpIHtcbiAgICBsZXQgb3V0cHV0ID0gXCJcIjtcbiAgICBsZXQgdG90YWxDaHVua3MgPSAoaW5wdXQubGVuZ3RoIC8gY2h1bmtTaXplKSB8IDA7XG4gICAgbGV0IGxhc3RDaHVua0lzVW5ldmVuID0gaW5wdXQubGVuZ3RoICUgY2h1bmtTaXplID4gMDtcbiAgICBpZiAobGFzdENodW5rSXNVbmV2ZW4pIHtcbiAgICAgIHRvdGFsQ2h1bmtzICs9IDE7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG90YWxDaHVua3M7IGkrKykge1xuICAgICAgbGV0IHN0YXJ0ID0gaSAqIGNodW5rU2l6ZTtcbiAgICAgIGxldCBlbmQgPSBzdGFydCArIGNodW5rU2l6ZTtcbiAgICAgIGlmIChsYXN0Q2h1bmtJc1VuZXZlbiAmJiBpID09PSB0b3RhbENodW5rcyAtIDEpIHtcbiAgICAgICAgZW5kID0gaW5wdXQubGVuZ3RoO1xuICAgICAgfVxuICAgICAgb3V0cHV0ICs9IGlucHV0LnNsaWNlKHN0YXJ0LCBlbmQpICsgXCIgXCI7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH1cblxuICBmdW5jdGlvbiBlbGxpcHNpemUoaW5wdXQsIG1heExlbmd0aCkge1xuICAgIGNvbnN0IHdvcmRzID0gdG9rZW5pemUoaW5wdXQpO1xuICAgIGlmICh3b3Jkcy5sZW5ndGggPD0gbWF4TGVuZ3RoKSB7XG4gICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIHJldHVybiBpbnB1dC5zbGljZSgwLCB3b3Jkc1ttYXhMZW5ndGhdLmVuZCkgKyBcIi4uLlwiO1xuICB9XG5cbiAgaWYgKCFTdHJpbmcucHJvdG90eXBlLm1hdGNoQWxsKSB7XG4gICAgU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbCA9IGZ1bmN0aW9uIChyZWdleCkge1xuICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICBmdW5jdGlvbiBlbnN1cmVGbGFnKGZsYWdzLCBmbGFnKSB7XG4gICAgICAgIHJldHVybiBmbGFncy5pbmNsdWRlcyhmbGFnKSA/IGZsYWdzIDogZmxhZ3MgKyBmbGFnO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24qIG1hdGNoQWxsKHN0ciwgcmVnZXgpIHtcbiAgICAgICAgY29uc3QgbG9jYWxDb3B5ID0gbmV3IFJlZ0V4cChyZWdleCwgZW5zdXJlRmxhZyhyZWdleC5mbGFncywgXCJnXCIpKTtcbiAgICAgICAgbGV0IG1hdGNoO1xuICAgICAgICB3aGlsZSAoKG1hdGNoID0gbG9jYWxDb3B5LmV4ZWMoc3RyKSkpIHtcbiAgICAgICAgICBtYXRjaC5pbmRleCA9IGxvY2FsQ29weS5sYXN0SW5kZXggLSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICAgICAgeWllbGQgbWF0Y2g7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaEFsbCh0aGlzLCByZWdleCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENvbG9yRm9yU2VhcmNoUmVzdWx0KHNjb3JlKSB7XG4gICAgY29uc3QgaGlnaFF1YWxpdHlIdWUgPSAxNzE7XG4gICAgY29uc3QgbG93UXVhbGl0eUh1ZSA9IDIxMjtcbiAgICByZXR1cm4gYWRqdXN0SHVlKGhpZ2hRdWFsaXR5SHVlLCBsb3dRdWFsaXR5SHVlLCBzY29yZSk7XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIGFkanVzdEh1ZShodWUxLCBodWUyLCBzY29yZSkge1xuICAgIGlmIChzY29yZSA+IDMpIHJldHVybiBgaHNsKCR7aHVlMX0sIDEwMCUsIDUwJSlgO1xuICAgIGNvbnN0IGh1ZUFkanVzdCA9IChwYXJzZUZsb2F0KHNjb3JlKSAvIDMpICogKGh1ZTEgLSBodWUyKTtcbiAgICBjb25zdCBuZXdIdWUgPSBodWUyICsgTWF0aC5mbG9vcihodWVBZGp1c3QpO1xuICAgIHJldHVybiBgaHNsKCR7bmV3SHVlfSwgMTAwJSwgNTAlKWA7XG4gIH1cbi8vIE5ld1xuZnVuY3Rpb24gcmVuZGVyU2VhcmNoUmVzdWx0cyhxdWVyeSwgcmVzdWx0cykge1xuICAgIGNsZWFyU2VhcmNoUmVzdWx0cygpO1xuICAgIHVwZGF0ZVNlYXJjaFJlc3VsdHMocXVlcnksIHJlc3VsdHMpO1xuICAgIHNob3dTZWFyY2hSZXN1bHRzKCk7XG4gICAgc2Nyb2xsVG9Ub3AoKTtcbiAgfVxuICBcbiAgZnVuY3Rpb24gY2xlYXJTZWFyY2hSZXN1bHRzKCkge1xuICAgIGNvbnN0IHJlc3VsdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNlYXJjaC1yZXN1bHRzIHVsXCIpO1xuICAgIHdoaWxlIChyZXN1bHRzLmZpcnN0Q2hpbGQpIHJlc3VsdHMucmVtb3ZlQ2hpbGQocmVzdWx0cy5maXJzdENoaWxkKTtcbiAgfVxuICBcbiAgZnVuY3Rpb24gdXBkYXRlU2VhcmNoUmVzdWx0cyhxdWVyeSwgcmVzdWx0cykge1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicXVlcnlcIikuaW5uZXJIVE1MID0gcXVlcnk7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNyZXN1bHQtY29udGFpbmVyIHVsXCIpLmlubmVySFRNTCA9IHJlc3VsdHNcbiAgICAgIC5tYXAoXG4gICAgICAgIChoaXQpID0+IGBcbiAgICAgIDxsaSBjbGFzcz1cInNlYXJjaC1yZXN1bHQtaXRlbVwiIGRhdGEtc2NvcmU9XCIke2hpdC5zY29yZS50b0ZpeGVkKDIpfVwiPlxuICAgICAgICA8YSBocmVmPVwiJHtoaXQuaHJlZn1cIiBjbGFzcz1cInNlYXJjaC1yZXN1bHQtcGFnZS10aXRsZVwiPiR7aGl0LnRpdGxlfTwvYT5cbiAgICAgICAgPHA+JHtjcmVhdGVTZWFyY2hSZXN1bHRCbHVyYihxdWVyeSwgaGl0LmNvbnRlbnQpfTwvcD5cbiAgICAgIDwvbGk+XG4gICAgICBgXG4gICAgICApXG4gICAgICAuam9pbihcIlwiKTtcbiAgICBjb25zdCBzZWFyY2hSZXN1bHRMaXN0SXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiI3Jlc3VsdC1jb250YWluZXIgdWwgbGlcIik7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXN1bHRzLWNvdW50XCIpLmlubmVySFRNTCA9IHNlYXJjaFJlc3VsdExpc3RJdGVtcy5sZW5ndGg7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXN1bHRzLWNvdW50LXRleHRcIikuaW5uZXJIVE1MID0gc2VhcmNoUmVzdWx0TGlzdEl0ZW1zLmxlbmd0aCA+IDEgPyBcInJlc3VsdHNcIiA6IFwicmVzdWx0XCI7XG4gICAgc2VhcmNoUmVzdWx0TGlzdEl0ZW1zLmZvckVhY2goXG4gICAgICAobGkpID0+IChsaS5maXJzdEVsZW1lbnRDaGlsZC5zdHlsZS5jb2xvciA9IGdldENvbG9yRm9yU2VhcmNoUmVzdWx0KGxpLmRhdGFzZXQuc2NvcmUpKVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBzaG93U2VhcmNoUmVzdWx0cygpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByaW1hcnlcIikuY2xhc3NMaXN0LmFkZChcImhpZGUtZWxlbWVudFwiKTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNlYXJjaC1yZXN1bHRzXCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlLWVsZW1lbnRcIik7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaXRlLXNlYXJjaFwiKS5jbGFzc0xpc3QuYWRkKFwiZXhwYW5kZWRcIik7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjbGVhci1zZWFyY2gtcmVzdWx0cy1zaWRlYmFyXCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlLWVsZW1lbnRcIik7XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIHNjcm9sbFRvVG9wKCkge1xuICAgIGNvbnN0IHRvVG9wSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBzdXBwb3J0ZWRTY3JvbGxUb3AgPSBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA+IDAgPyBkb2N1bWVudC5ib2R5IDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgaWYgKHN1cHBvcnRlZFNjcm9sbFRvcC5zY3JvbGxUb3AgPiAwKSB7XG4gICAgICAgIHN1cHBvcnRlZFNjcm9sbFRvcC5zY3JvbGxUb3AgPSBzdXBwb3J0ZWRTY3JvbGxUb3Auc2Nyb2xsVG9wIC0gNTA7XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydGVkU2Nyb2xsVG9wLnNjcm9sbFRvcCA8IDEpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0b1RvcEludGVydmFsKTtcbiAgICAgIH1cbiAgICB9LCAxMCk7XG4gIH0iLCJjb25zdCBzZWFyY2hUb2dnbGUgPSAob2JqLCBldnQpID0+IHtcbiAgY29uc3QgY29udGFpbmVyID0gJChvYmopLmNsb3Nlc3QoJyNzZWFyY2gtd3JhcHBlcicpO1xuICBjb25zdCBpY29uID0gJChvYmopLmNsb3Nlc3QoJyNzZWFyY2gtaWNvbicpXG4gIGlmICghY29udGFpbmVyLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xuICAgIGNvbnRhaW5lci5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgaWNvbi5hZGRDbGFzcygnc2VhcmNoLWljb24nKVxuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9IGVsc2UgaWYgKGNvbnRhaW5lci5oYXNDbGFzcygnYWN0aXZlJykgJiYgJChvYmopXG4gICAgICAuY2xvc2VzdCgnI2lucHV0LWhvbGRlcicpLmxlbmd0aCA9PSAwKSB7XG4gICAgY29udGFpbmVyLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICBpY29uLnJlbW92ZUNsYXNzKCdzZWFyY2gtaWNvbicpXG4gICAgLy8gY2xlYXIgaW5wdXRcbiAgICBjb250YWluZXIuZmluZCgnI3NlYXJjaC1pbnB1dCcpLnZhbCgnJyk7XG4gICAgLy8gY2xlYXIgYW5kIGhpZGUgcmVzdWx0IGNvbnRhaW5lciB3aGVuIHdlIHByZXNzIGNsb3NlXG4gICAgY29udGFpbmVyLmZpbmQoJyNyZXN1bHQtY29udGFpbmVyJykuZmFkZU91dCgxMDAsICgpID0+IHtcbiAgICAgICQodGhpcykuZW1wdHkoKTtcbiAgICB9KTtcbiAgfVxufVxuY29uc3Qgc3VibWl0Rm4gPSAob2JqLCBldnQpID0+IHtcbiAgdmFsdWUgPSAkKG9iaikuZmluZCgnI3NlYXJjaC1pbnB1dCcpLnZhbCgpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICBfaHRtbCA9ICdTZWFyY2hpbmcgZm9yOiAnO1xuICBpZiAoIXZhbHVlLmxlbmd0aCkge1xuICAgIF9odG1sID0gJ0VoZW0sIEkgY2FuXFwndCBzZWFyY2ggbm90aGluZyc7XG4gIH0gZWxzZSB7XG4gICAgX2h0bWwgKz0gJzxiPicgKyB2YWx1ZSArICc8L2I+JztcbiAgfVxuICAkKG9iaikuZmluZCgnI3Jlc3VsdC1jb250YWluZXInKS5odG1sKCc8c3Bhbj4nICsgX2h0bWwgKyAnPC9zcGFuPicpO1xuICAkKG9iaikuZmluZCgnI3Jlc3VsdC1jb250YWluZXInKS5mYWRlSW4oMTAwKTtcbiAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG59Il19
